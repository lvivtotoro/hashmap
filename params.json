{
  "name": "hashmap",
  "tagline": "An esoteric programming language",
  "body": "# How to use Hashmap\r\n\r\n## Pushing things in\r\nNumbers `0` through `9` push their self into the stack. `10` pushes `1` and `0` into the stack, not `10`.  \r\nText between 2 `\"` characters are pushed in as a string.  \r\nCharacters are pushed in using `'`. Example: `'a` pushes the character `a` into the stack.  \r\n\r\n## Math\r\n(The following command pop at least one value.)  \r\n`+` pushes in the sum.  \r\n`-` subtracts the last value from the 2-last.  \r\n`*` multiplies the 2 latest items.  \r\n`/` divides the last value from the 2-last.  \r\n`^` Exponent operator.  \r\n`m` is a double-character command:  \r\n* `mq` pops the latest value and pushes in the square root.\r\n* `mf` floors the value\r\n* `mc` ceils the value\r\n* `ma` pushes the absolute value\r\n\r\n## Type conversion\r\n`s` Converts anything into a string.  \r\n`d` Converts a string into a number that the string represents, and converts a character into it's number representation.  \r\n`c` Converts a number into it's character representation or gets the first character of a string.  \r\n\r\n## Operations on strings\r\n`s` does not only convert anything into a string. If the value is already a string then it needs another command in front of it to perform something on the string:  \r\n`sl` Converts a string to lowercase.  \r\n`su` Converts a string to uppercase.  \r\n`sr` Reverses a string.  \r\n\r\n## Getting input\r\n`i` Push the input as a string.  \r\n`h` Short for `id`.  \r\n\r\n## Variables\r\n`:` Pop a value into a variable.  \r\nThe variable name is one character (Any character available in the encoding used to read the file).  \r\n`5:A` puts the number `5` into the variable `A`.  \r\n`;` Pushes a variable into the stack.  \r\n`;A` pushes 5 to the stack, in this case.\r\n\r\n## Code Blocks\r\nKind of taken from CJam, a Code Block is basically a function with no name but can be assigned to variables.  \r\nCode in between `{` and `}` is put in a code block.  \r\nNested code blocks are allowed.  \r\n`>` runs a code block (also pops it)  \r\n\r\n## Outputting\r\n`|` prints the entire stack, `l` prints only the latest value.  \r\n\r\n## Clearing the stack\r\n`.` Pops everything in the stack.  \r\n`p` Pops the latest value.  \r\n\r\n## For loops\r\nA pretty big topic on esoteric programming languages.  \r\nA for loop basically repeats a function with at least one different argument until it reaches the end of a list or an iterable.  \r\nThe first argument is a code block, the second is the object to iterate.  \r\nThis object can be an array. If it's a string, then the for loop iterates over the characters in the string.  \r\nThe third argument a character. This character will be the name of a variable only useable in the for-loop.  \r\nExample:  \r\n`{;a|.}i'af` Performs a for-loop on the input, puts every object in this iterable in the `a` variable.  \r\nThat program prints every character in the input.  \r\n\r\n## While loops\r\nWhile loops are incredibly giltchy, and I strongly advise not to use them.  \r\nThe `<` command performs a while loop. It's argument is a Code Block.  \r\nThe `!` symbol breaks out of a while loop.  \r\n\r\n## Comparing values\r\nThe `=` needs 2 arguments. It is the 2 values to compare.  \r\nThe command then pushes either a `true` or a `false`.  \r\n\r\n## If statements\r\nThe `?` command runs a code block if a value is `true`.  \r\nThe first argument is the boolean and the second one is the the code block.  \r\nExample: `22={\"yes\"}?`  \r\nThat example always prints out \"yes\" as 2 is equal to 2.  \r\n\r\n## Other things\r\n`Ĥ` splits a list into groups of different values.  \r\nExample: `[5 5 4 6 9 9 9]Ĥ` creates a list of: `[[5 5] [4] [6] [9 9 9]]`\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}